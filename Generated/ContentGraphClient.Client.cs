// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace ContentGraphClientNS
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetProductPagesResult : global::System.IEquatable<GetProductPagesResult>, IGetProductPagesResult
    {
        public GetProductPagesResult(global::ContentGraphClientNS.IGetProductPages_ProductPage? productPage)
        {
            ProductPage = productPage;
        }

        public global::ContentGraphClientNS.IGetProductPages_ProductPage? ProductPage { get; }

        public virtual global::System.Boolean Equals(GetProductPagesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ProductPage is null && other.ProductPage is null) || ProductPage != null && ProductPage.Equals(other.ProductPage)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProductPagesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ProductPage != null)
                {
                    hash ^= 397 * ProductPage.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetProductPages_ProductPage_ProductPageOutput : global::System.IEquatable<GetProductPages_ProductPage_ProductPageOutput>, IGetProductPages_ProductPage_ProductPageOutput
    {
        public GetProductPages_ProductPage_ProductPageOutput(global::System.Collections.Generic.IReadOnlyList<global::ContentGraphClientNS.IGetProductPages_ProductPage_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::ContentGraphClientNS.IGetProductPages_ProductPage_Items?>? Items { get; }

        public virtual global::System.Boolean Equals(GetProductPages_ProductPage_ProductPageOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Items, other.Items));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProductPages_ProductPage_ProductPageOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Items != null)
                {
                    foreach (var Items_elm in Items)
                    {
                        if (Items_elm != null)
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetProductPages_ProductPage_Items_ProductPage : global::System.IEquatable<GetProductPages_ProductPage_Items_ProductPage>, IGetProductPages_ProductPage_Items_ProductPage
    {
        public GetProductPages_ProductPage_Items_ProductPage(global::System.String? metaDescription, global::System.Collections.Generic.IReadOnlyList<global::System.String?>? metaKeywords, global::System.String? name, global::System.String? metaTitle, global::System.String? teaserText, global::ContentGraphClientNS.IGetProductPages_ProductPage_Items_PageImage? pageImage)
        {
            MetaDescription = metaDescription;
            MetaKeywords = metaKeywords;
            Name = name;
            MetaTitle = metaTitle;
            TeaserText = teaserText;
            PageImage = pageImage;
        }

        public global::System.String? MetaDescription { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? MetaKeywords { get; }
        public global::System.String? Name { get; }
        public global::System.String? MetaTitle { get; }
        public global::System.String? TeaserText { get; }
        public global::ContentGraphClientNS.IGetProductPages_ProductPage_Items_PageImage? PageImage { get; }

        public virtual global::System.Boolean Equals(GetProductPages_ProductPage_Items_ProductPage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MetaDescription is null && other.MetaDescription is null) || MetaDescription != null && MetaDescription.Equals(other.MetaDescription))) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(MetaKeywords, other.MetaKeywords) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((MetaTitle is null && other.MetaTitle is null) || MetaTitle != null && MetaTitle.Equals(other.MetaTitle)) && ((TeaserText is null && other.TeaserText is null) || TeaserText != null && TeaserText.Equals(other.TeaserText)) && ((PageImage is null && other.PageImage is null) || PageImage != null && PageImage.Equals(other.PageImage));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProductPages_ProductPage_Items_ProductPage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (MetaDescription != null)
                {
                    hash ^= 397 * MetaDescription.GetHashCode();
                }

                if (MetaKeywords != null)
                {
                    foreach (var MetaKeywords_elm in MetaKeywords)
                    {
                        if (MetaKeywords_elm != null)
                        {
                            hash ^= 397 * MetaKeywords_elm.GetHashCode();
                        }
                    }
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (MetaTitle != null)
                {
                    hash ^= 397 * MetaTitle.GetHashCode();
                }

                if (TeaserText != null)
                {
                    hash ^= 397 * TeaserText.GetHashCode();
                }

                if (PageImage != null)
                {
                    hash ^= 397 * PageImage.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetProductPages_ProductPage_Items_PageImage_ContentModelReference : global::System.IEquatable<GetProductPages_ProductPage_Items_PageImage_ContentModelReference>, IGetProductPages_ProductPage_Items_PageImage_ContentModelReference
    {
        public GetProductPages_ProductPage_Items_PageImage_ContentModelReference(global::System.String? url)
        {
            Url = url;
        }

        public global::System.String? Url { get; }

        public virtual global::System.Boolean Equals(GetProductPages_ProductPage_Items_PageImage_ContentModelReference? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Url is null && other.Url is null) || Url != null && Url.Equals(other.Url)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProductPages_ProductPage_Items_PageImage_ContentModelReference)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Url != null)
                {
                    hash ^= 397 * Url.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetProductPagesResult
    {
        public global::ContentGraphClientNS.IGetProductPages_ProductPage? ProductPage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetProductPages_ProductPage
    {
        public global::System.Collections.Generic.IReadOnlyList<global::ContentGraphClientNS.IGetProductPages_ProductPage_Items?>? Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetProductPages_ProductPage_ProductPageOutput : IGetProductPages_ProductPage
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IFragment
    {
        public global::System.String? MetaTitle { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetProductPages_ProductPage_Items : IFragment
    {
        public global::System.String? MetaDescription { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? MetaKeywords { get; }
        public global::System.String? Name { get; }
        public global::System.String? TeaserText { get; }
        public global::ContentGraphClientNS.IGetProductPages_ProductPage_Items_PageImage? PageImage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetProductPages_ProductPage_Items_ProductPage : IGetProductPages_ProductPage_Items
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetProductPages_ProductPage_Items_PageImage
    {
        public global::System.String? Url { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetProductPages_ProductPage_Items_PageImage_ContentModelReference : IGetProductPages_ProductPage_Items_PageImage
    {
    }

    /// <summary>
    /// Represents the operation service of the GetProductPages GraphQL operation
    /// <code>
    /// query GetProductPages {
    ///   ProductPage {
    ///     __typename
    ///     items {
    ///       __typename
    ///       MetaDescription
    ///       MetaKeywords
    ///       Name
    ///       ... Fragment
    ///       TeaserText
    ///       PageImage {
    ///         __typename
    ///         Url
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment Fragment on ProductPage {
    ///   MetaTitle
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetProductPagesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetProductPagesQueryDocument()
        {
        }

        public static GetProductPagesQueryDocument Instance { get; } = new GetProductPagesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x50,
            0x61,
            0x67,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x50,
            0x61,
            0x67,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x4d,
            0x65,
            0x74,
            0x61,
            0x44,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x65,
            0x74,
            0x61,
            0x4b,
            0x65,
            0x79,
            0x77,
            0x6f,
            0x72,
            0x64,
            0x73,
            0x20,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x46,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x54,
            0x65,
            0x61,
            0x73,
            0x65,
            0x72,
            0x54,
            0x65,
            0x78,
            0x74,
            0x20,
            0x50,
            0x61,
            0x67,
            0x65,
            0x49,
            0x6d,
            0x61,
            0x67,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x55,
            0x72,
            0x6c,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x46,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x64,
            0x75,
            0x63,
            0x74,
            0x50,
            0x61,
            0x67,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x4d,
            0x65,
            0x74,
            0x61,
            0x54,
            0x69,
            0x74,
            0x6c,
            0x65,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4f449f76bcf3bc4565542bc6c7eb574b");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProductPages GraphQL operation
    /// <code>
    /// query GetProductPages {
    ///   ProductPage {
    ///     __typename
    ///     items {
    ///       __typename
    ///       MetaDescription
    ///       MetaKeywords
    ///       Name
    ///       ... Fragment
    ///       TeaserText
    ///       PageImage {
    ///         __typename
    ///         Url
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment Fragment on ProductPage {
    ///   MetaTitle
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetProductPagesQuery : global::ContentGraphClientNS.IGetProductPagesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetProductPagesResult> _operationExecutor;
        public GetProductPagesQuery(global::StrawberryShake.IOperationExecutor<IGetProductPagesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetProductPagesResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProductPagesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProductPagesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetProductPagesQueryDocument.Instance.Hash.Value, name: "GetProductPages", document: GetProductPagesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProductPages GraphQL operation
    /// <code>
    /// query GetProductPages {
    ///   ProductPage {
    ///     __typename
    ///     items {
    ///       __typename
    ///       MetaDescription
    ///       MetaKeywords
    ///       Name
    ///       ... Fragment
    ///       TeaserText
    ///       PageImage {
    ///         __typename
    ///         Url
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment Fragment on ProductPage {
    ///   MetaTitle
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetProductPagesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProductPagesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProductPagesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ContentGraphClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ContentGraphClient : global::ContentGraphClientNS.IContentGraphClient
    {
        private readonly global::ContentGraphClientNS.IGetProductPagesQuery _getProductPages;
        public ContentGraphClient(global::ContentGraphClientNS.IGetProductPagesQuery getProductPages)
        {
            _getProductPages = getProductPages ?? throw new global::System.ArgumentNullException(nameof(getProductPages));
        }

        public static global::System.String ClientName => "ContentGraphClient";
        public global::ContentGraphClientNS.IGetProductPagesQuery GetProductPages => _getProductPages;
    }

    /// <summary>
    /// Represents the ContentGraphClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IContentGraphClient
    {
        global::ContentGraphClientNS.IGetProductPagesQuery GetProductPages { get; }
    }
}

namespace ContentGraphClientNS.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetProductPagesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ContentGraphClientNS.GetProductPagesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProductPagesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ContentGraphClientNS.IGetProductPagesResult);

        public GetProductPagesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetProductPagesResultInfo info)
            {
                return new GetProductPagesResult(MapIGetProductPages_ProductPage(info.ProductPage, snapshot));
            }

            throw new global::System.ArgumentException("GetProductPagesResultInfo expected.");
        }

        private global::ContentGraphClientNS.IGetProductPages_ProductPage? MapIGetProductPages_ProductPage(global::ContentGraphClientNS.State.ProductPageOutputData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetProductPages_ProductPage returnValue = default !;
            if (data?.__typename.Equals("ProductPageOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetProductPages_ProductPage_ProductPageOutput(MapIGetProductPages_ProductPage_ItemsArray(data.Items, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ContentGraphClientNS.IGetProductPages_ProductPage_Items?>? MapIGetProductPages_ProductPage_ItemsArray(global::System.Collections.Generic.IReadOnlyList<global::ContentGraphClientNS.State.ProductPageData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var productPages = new global::System.Collections.Generic.List<global::ContentGraphClientNS.IGetProductPages_ProductPage_Items?>();
            foreach (global::ContentGraphClientNS.State.ProductPageData? child in list)
            {
                productPages.Add(MapIGetProductPages_ProductPage_Items(child, snapshot));
            }

            return productPages;
        }

        private global::ContentGraphClientNS.IGetProductPages_ProductPage_Items? MapIGetProductPages_ProductPage_Items(global::ContentGraphClientNS.State.ProductPageData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetProductPages_ProductPage_Items returnValue = default !;
            if (data?.__typename.Equals("ProductPage", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetProductPages_ProductPage_Items_ProductPage(data.MetaDescription, data.MetaKeywords, data.Name, data.MetaTitle, data.TeaserText, MapIGetProductPages_ProductPage_Items_PageImage(data.PageImage, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ContentGraphClientNS.IGetProductPages_ProductPage_Items_PageImage? MapIGetProductPages_ProductPage_Items_PageImage(global::ContentGraphClientNS.State.ContentModelReferenceData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetProductPages_ProductPage_Items_PageImage returnValue = default !;
            if (data?.__typename.Equals("ContentModelReference", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetProductPages_ProductPage_Items_PageImage_ContentModelReference(data.Url);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetProductPagesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetProductPagesResultInfo(global::ContentGraphClientNS.State.ProductPageOutputData? productPage, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ProductPage = productPage;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ContentGraphClientNS.State.ProductPageOutputData? ProductPage { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetProductPagesResultInfo(ProductPage, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetProductPagesBuilder : global::StrawberryShake.OperationResultBuilder<global::ContentGraphClientNS.IGetProductPagesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetProductPagesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ContentGraphClientNS.IGetProductPagesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ContentGraphClientNS.IGetProductPagesResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetProductPagesResultInfo(Deserialize_IGetProductPages_ProductPage(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ProductPage")), entityIds, snapshot.Version);
        }

        private global::ContentGraphClientNS.State.ProductPageOutputData? Deserialize_IGetProductPages_ProductPage(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProductPageOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ContentGraphClientNS.State.ProductPageOutputData(typename, items: Deserialize_IGetProductPages_ProductPage_ItemsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ContentGraphClientNS.State.ProductPageData?>? Deserialize_IGetProductPages_ProductPage_ItemsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var productPages = new global::System.Collections.Generic.List<global::ContentGraphClientNS.State.ProductPageData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                productPages.Add(Deserialize_IGetProductPages_ProductPage_Items(child));
            }

            return productPages;
        }

        private global::ContentGraphClientNS.State.ProductPageData? Deserialize_IGetProductPages_ProductPage_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProductPage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ContentGraphClientNS.State.ProductPageData(typename, metaDescription: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "MetaDescription")), metaKeywords: Deserialize_StringArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "MetaKeywords")), name: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Name")), metaTitle: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "MetaTitle")), teaserText: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "TeaserText")), pageImage: Deserialize_IGetProductPages_ProductPage_Items_PageImage(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "PageImage")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Deserialize_StringArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(Deserialize_String(child));
            }

            return @strings;
        }

        private global::ContentGraphClientNS.State.ContentModelReferenceData? Deserialize_IGetProductPages_ProductPage_Items_PageImage(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ContentModelReference", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ContentGraphClientNS.State.ContentModelReferenceData(typename, url: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Url")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ProductPageOutputData
    {
        public ProductPageOutputData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::ContentGraphClientNS.State.ProductPageData?>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Items = items;
        }

        public global::System.String __typename { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ContentGraphClientNS.State.ProductPageData?>? Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IIDataData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IIContentData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IISitePageDataData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ProductPageData : IIDataData, IIContentData, IISitePageDataData
    {
        public ProductPageData(global::System.String __typename, global::System.String? metaDescription = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String?>? metaKeywords = default !, global::System.String? name = default !, global::System.String? metaTitle = default !, global::System.String? teaserText = default !, global::ContentGraphClientNS.State.ContentModelReferenceData? pageImage = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            MetaDescription = metaDescription;
            MetaKeywords = metaKeywords;
            Name = name;
            MetaTitle = metaTitle;
            TeaserText = teaserText;
            PageImage = pageImage;
        }

        public global::System.String __typename { get; }
        public global::System.String? MetaDescription { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? MetaKeywords { get; }
        public global::System.String? Name { get; }
        public global::System.String? MetaTitle { get; }
        public global::System.String? TeaserText { get; }
        public global::ContentGraphClientNS.State.ContentModelReferenceData? PageImage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ContentModelReferenceData
    {
        public ContentModelReferenceData(global::System.String __typename, global::System.String? url = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Url = url;
        }

        public global::System.String __typename { get; }
        public global::System.String? Url { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ContentGraphClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ContentGraphClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ContentGraphClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public static partial class ContentGraphClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::ContentGraphClientNS.State.ContentGraphClientStoreAccessor> AddContentGraphClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::ContentGraphClientNS.State.ContentGraphClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContentGraphClientNS.GetProductPagesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContentGraphClientNS.ContentGraphClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContentGraphClientNS.IContentGraphClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::ContentGraphClientNS.State.ContentGraphClientStoreAccessor>("ContentGraphClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ContentGraphClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ContentGraphClientNS.IGetProductPagesResult>, global::ContentGraphClientNS.State.GetProductPagesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ContentGraphClientNS.IGetProductPagesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContentGraphClientNS.IGetProductPagesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ContentGraphClientNS.IGetProductPagesResult>, global::ContentGraphClientNS.State.GetProductPagesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ContentGraphClientNS.IGetProductPagesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ContentGraphClientNS.IGetProductPagesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ContentGraphClientNS.IGetProductPagesResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContentGraphClientNS.GetProductPagesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContentGraphClientNS.IGetProductPagesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContentGraphClientNS.GetProductPagesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::ContentGraphClientNS.State.ContentGraphClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContentGraphClientNS.ContentGraphClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContentGraphClientNS.IContentGraphClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContentGraphClientNS.ContentGraphClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
